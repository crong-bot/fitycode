[{"C:\\Users\\user\\Desktop\\fityplay-master\\src\\small.js":"1","C:\\Users\\user\\Desktop\\fityplay-master\\src\\Editor.js":"2","C:\\Users\\user\\Desktop\\fityplay-master\\src\\index.js":"3","C:\\Users\\user\\Desktop\\fityplay-master\\src\\generate.js":"4","C:\\Users\\user\\Desktop\\fityplay-master\\src\\App.js":"5","C:\\Users\\user\\Desktop\\fityplay-master\\src\\lexer.js":"6"},{"size":14460,"mtime":1606444454015,"results":"7","hashOfConfig":"8"},{"size":871,"mtime":1606440460504,"results":"9","hashOfConfig":"8"},{"size":219,"mtime":1606440460706,"results":"10","hashOfConfig":"8"},{"size":2673,"mtime":1606440460568,"results":"11","hashOfConfig":"8"},{"size":2134,"mtime":1606444463734,"results":"12","hashOfConfig":"8"},{"size":1298,"mtime":1606440460732,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1suiiuc",{"filePath":"16","messages":"17","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"20"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\user\\Desktop\\fityplay-master\\src\\small.js",["28"],"C:\\Users\\user\\Desktop\\fityplay-master\\src\\Editor.js",["29"],"C:\\Users\\user\\Desktop\\fityplay-master\\src\\index.js",[],["30","31"],"C:\\Users\\user\\Desktop\\fityplay-master\\src\\generate.js",["32"],"function generateJsForStatements(statements) {\n  const lines = [];\n  for (let statement of statements) {\n    const line = tp(statement);\n    lines.push(line);\n  }\n  return lines.join('\\n');\n}\nfunction tp(node) {\n  if (node.type === 'closure') {\n    return `${node.statements.map((d) => tp(d)).join('\\n')}`;\n  } else if (node.type === 'var_assign') {\n    const varName = node.var_name.value;\n    const jsExpr = tp(node.value);\n    const js = `var ${varName} = ${jsExpr}`;\n    return js;\n  } else if (node.type === 'fun_call') {\n    const funName = node.fun_name.value;\n    const arg_list = node.arguments\n      .map((arg) => {\n        return tp(arg);\n      })\n      .join(',');\n    return `${funName}(${arg_list})`;\n  } else if (node.type === 'ifstate') {\n    if (node.has_middle_condition && node.has_last_statement) {\n      return `if(${tp(node.first_condition)}) {\n      ${tp(...node.first_statement)}}\n      ${node.middle_condition\n        .map((d, i) => `else if(${tp(d)}) {${tp(...node.middle_statement[i])}}`)\n        .join('\\n')}\n      else {${tp(...node.last_statement)}}\n      `;\n    } else if (node.has_middle_condition && !node.has_last_statement) {\n      return `if(${tp(node.first_condition)}) {\n      ${tp(...node.first_statement)}}\n      ${node.middle_condition\n        .map((d, i) => `else if(${tp(d)}) {${tp(...node.middle_statement[i])}}`)\n        .join('\\n')}`;\n    } else if (!node.has_middle_condition && node.has_last_statement) {\n      return `if(${tp(node.first_condition)}) {\n      ${tp(...node.first_statement)}}\n      else {${tp(...node.last_statement)}}`;\n    } else {\n      return `if(${tp(node.first_condition)}) {\n      ${tp(...node.first_statement)}}`;\n    }\n  } else if (node.type === 'condition') {\n    return node.value.map((d) => tp(d)).join('');\n  } else if (node.type === 'array') {\n    const arrayname = node.array_name.value;\n    return `var ${arrayname}=[${node.array_value\n      .map((d) => {\n        return tp(d);\n      })\n      .join(',')}]`;\n  } else if (node.type === 'for_block') {\n    const a = node.a.value;\n    const b = node.b.value;\n    return `for (var ${a} in ${b}) {${tp(...node.statement)} };`;\n  } else if (node.type === 'return') {\n    return node.value;\n  } else if (node.type === 'operator') {\n    return node.value;\n  } else if (node.type === 'string') {\n    return node.value;\n  } else if (node.type === 'number') {\n    return node.value;\n  } else if (node.type === 'identifier') {\n    return node.value;\n  } else if (node.type === 'calculator') {\n    return node.value;\n  } else {\n    console.log('문법이 틀렸어요...');\n    /* throw new Error(`unhandled ast node type 11`); */\n  }\n}\n\nexport default tp;\n","C:\\Users\\user\\Desktop\\fityplay-master\\src\\App.js",["33"],"C:\\Users\\user\\Desktop\\fityplay-master\\src\\lexer.js",[],{"ruleId":"34","severity":1,"message":"35","line":10,"column":9,"nodeType":"36","messageId":"37","endLine":10,"endColumn":21},{"ruleId":"34","severity":1,"message":"38","line":1,"column":17,"nodeType":"36","messageId":"37","endLine":1,"endColumn":25},{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},{"ruleId":"34","severity":1,"message":"43","line":1,"column":10,"nodeType":"36","messageId":"37","endLine":1,"endColumn":33},{"ruleId":"44","severity":1,"message":"45","line":44,"column":5,"nodeType":"46","messageId":"47","endLine":44,"endColumn":9},"no-unused-vars","'wrapVariable' is assigned a value but never used.","Identifier","unusedVar","'useState' is defined but never used.","no-native-reassign",["48"],"no-negated-in-lhs",["49"],"'generateJsForStatements' is defined but never used.","no-eval","eval can be harmful.","CallExpression","unexpected","no-global-assign","no-unsafe-negation"]